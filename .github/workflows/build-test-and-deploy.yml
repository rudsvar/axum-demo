name: Build, test, and deploy

on:
  push:
    branches: [ "**" ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.7.2
  DATABASE_URL: ${{ secrets.DATABASE_URL }} # For sqlx

jobs:
  build-test-and-deploy:
    name: Build, test, and deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the OIDC JWT Token
      contents: read # Required when GH token is used to authenticate with private repo

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:3.11.5
        ports:
          - 5672:5672

    steps:
      - uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - uses: Swatinem/rust-cache@v2

      - name: Check fmt
        run: cargo fmt --check

      - name: Install sqlx-cli
        run: |
          cargo install sqlx-cli \
            --version=${{ env.SQLX_VERSION }} \
            --features=postgres,rustls \
            --no-default-features \
            --locked

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Set up database
        run: sqlx database setup

      - name: Check sqlx-data.json
        run: cargo sqlx prepare --check -- --lib

      - name: Run tests (with tarpaulin)
        run: cargo tarpaulin --release --out xml

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true

      # Deploy

      - name: Build
        if: ${{ github.ref == 'refs/heads/main' && false }}
        run: SQLX_OFFLINE=true cargo build --release

      - name: Azure Login
        if: ${{ github.ref == 'refs/heads/main' && false }}
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.MYAPP_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.MYAPP_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.MYAPP_AZURE_SUBSCRIPTION_ID }}

      - name: Build and push container image to registry
        if: ${{ github.ref == 'refs/heads/main' && false }}
        uses: azure/container-apps-deploy-action@v2
        with:
          appSourcePath: ${{ github.workspace }}
          registryUrl: rudsvar.azurecr.io
          registryUsername: ${{ secrets.MYAPP_REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.MYAPP_REGISTRY_PASSWORD }}
          containerAppName: my-app
          resourceGroup: rudsvar_rg
          imageToBuild: rudsvar.azurecr.io/my-app:${{ github.sha }}
          dockerfilePath: Dockerfile-prebuilt
