name: CI

on:
  push:
    branches:
      - main
      - dev

env:
  CARGO_TERM_COLOR: always
  REGISTRY: "registry.digitalocean.com/rudsvar"
  IMAGE_NAME: "axum-demo"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
    env:
      SQLX_VERSION: 0.6.2
      CARGO_BUMP_VERSION: 1.1.0
    steps:
      - uses: actions/checkout@v3

      - name: Install protoc for gRPC
        run: sudo apt-get install -y protobuf-compiler

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2

      - name: Cache sqlx-cli
        uses: actions/cache@v3
        id: cache-sqlx
        with:
          path: |
            ~/.cargo/bin/sqlx
          key: ${{ runner.os }}-sqlx-${{ env.SQLX_VERSION }}-${{ env.SQLX_FEATURES }}

      - name: Install sqlx-cli
        uses: actions-rs/cargo@v1
        if: steps.cache-sqlx.outputs.cache-hit == false
        with:
          command: install
          args: >
            sqlx-cli
            --force
            --version=${{ env.SQLX_VERSION }}
            --features=postgres,rustls
            --no-default-features
            --locked

      - name: Cache cargo-bump
        uses: actions/cache@v3
        id: cache-cargo-bump
        with:
          path: |
            ~/.cargo/bin/cargo-bump
          key: ${{ runner.os }}-cargo-bump-${{ env.CARGO_BUMP_VERSION }}-${{ env.CARGO_BUMP_VERSION }}

      - name: Install cargo-bump
        uses: actions-rs/cargo@v1
        if: steps.cache-cargo-bump.outputs.cache-hit == false
        with:
          command: install
          args: >
            cargo-bump
            --force
            --version=${{ env.CARGO_BUMP_VERSION }}
            --locked

      - name: Set up database
        run: sqlx database setup

      - name: Verify that sqlx-data.json is up to date
        run: cargo sqlx prepare --check -- --lib

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all

      - name: Run cargo bump
        uses: actions-rs/cargo@v1
        with:
          command: bump

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

      - uses: stefanzweifel/git-auto-commit-action@v4

  deploy:
    if: github.ref == 'refs/heads/main'
    name: Deploy
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Build container image
        run: docker build . -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):latest

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Remove all old images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):latest
