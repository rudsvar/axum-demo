name: Release

on:
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: "registry.digitalocean.com/rudsvar"
  IMAGE_NAME: "axum-demo"
  CARGO_BUMP_VERSION: 1.1.0

jobs:
  release:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2

      - name: Cache cargo-bump
        uses: actions/cache@v3
        id: cache-cargo-bump
        with:
          path: |
            ~/.cargo/bin/cargo-bump
          key: ${{ runner.os }}-cargo-bump-${{ env.CARGO_BUMP_VERSION }}

      - name: Install cargo-bump
        uses: actions-rs/cargo@v1
        if: steps.cache-cargo-bump.outputs.cache-hit == false
        with:
          command: install
          args: >
            cargo-bump
            --force
            --version=${{ env.CARGO_BUMP_VERSION }}
            --locked

      - name: Run cargo bump
        uses: actions-rs/cargo@v1
        with:
          command: bump
          args: ${{ github.event.release.tag_name }}

      - name: Run cargo bump
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - uses: fregante/setup-git-user@v1

      - name: Commit version change
        uses: actions-rs/cargo@v1
        run: |
          git add Cargo.toml
          git add Cargo.lock
          git commit -m "Bump version"
          git push

      - name: Build container image
        run: docker build . -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):latest

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Remove all old images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):latest
